---
title: "R Notebook"
output: html_notebook
---


```{r setup}

require(ggplot2)
require(tidyquant)
require(data.table)
require(shiny)
require(tidyquant)

```


```{r minima test function}

 minima <- function (x, m = 3){
     signchg <- diff(sign(diff(x, na.pad = FALSE)))
     pks <- sapply(which(signchg < 0), FUN = function(i){
        beg <- max(1,i - m + 1)
        end <- min(length(x),i + m + 1)
        if(all(x[c(beg : i, (i + 2) : end)] <= x[i + 1])) return(i + 1) else return(numeric(0))
    })
     pks <- unlist(pks)
     pks
 }

```



```{r}

createlines<-function(AAPL,direction){
#creates trendlines based on minima or maxima
  
  mn<-minima(direction*AAPL$close,10)
  AAPL$minpoints<-AAPL$close
  AAPL$minpoints[!index(AAPL) %in% mn]<-0
  
  close<-AAPL$close
  m<-AAPL$close[index(AAPL) %in% mn]
  
linepointsX<-expand.grid(mn,mn) #minima pairwise, X value
linepointsY<-expand.grid(m,m) #minima pairwise, Y value

tlines<-sapply(seq(1,nrow(linepointsX)),function(i){
  slope<-(linepointsY[i,1]-linepointsY[i,2])/(linepointsX[i,1]-linepointsX[i,2])
  b<-linepointsY[i,1]-linepointsX[i,1]*slope
  return(unlist(c(slope,b)))
    })
tlines<-data.frame(t(tlines))

      
  crosspoints<-sapply(seq(1,nrow(tlines)),function(k){
#  crosspoints<-sapply(seq(48,48),function(k){
    firstline<-data.frame(X=seq(1,nrow(AAPL)),Y=seq(1,nrow(AAPL))*tlines[k,1]+tlines[k,2])
    signswitch<-diff(sign((close-firstline$Y)/firstline$Y-.01))
    crosses<-which(abs(signswitch)==2 & lag(signswitch,1)==0 & lead(signswitch,1)==0)
    
    crosses.first<-0
    if (length(crosses)>0){
     crosses.first<-min(crosses)
     crosses.last<-max(crosses)
    #does the period in-between break the trendline?
     between<-which(close/firstline$Y<.97)
    }else{between<-c()}
    return(c(crosses.first,length(between[between>crosses.first]),length(crosses)))
    
})
  #score tlines
   crosspoints<-t(crosspoints)
   tlines$firstcross<-crosspoints[,1] 
   tlines$valid<-crosspoints[,2]
   tlines$crosscount<-crosspoints[,3]
   tlines$relevant<-AAPL$close[nrow(AAPL)]-nrow(AAPL)*tlines[,1]+tlines[,2]/AAPL$close[nrow(AAPL)]
   tlines$validlength<-nrow(AAPL)-tlines$firstcross
   tlines$score<-sqrt(tlines$validlength*tlines$valid)/tlines$crosscount
   tlines<-data.table(tlines)
   tlines<-tlines[order(-score)]
   
   return(tlines)
}
```


```{r}

lineID<-2

plotline<-function(AAPL,tlines1,lineID=2){
  
   #melt all lines  
    lines<-sapply(seq(1,nrow(tlines1)),function(k){
       return(seq(1,nrow(AAPL))*as.double(tlines1[k,1])+as.double(tlines1[k,2]))
      })
    lines<-data.frame(X=seq(1,nrow(AAPL)),lines)%>%data.table()
    melted<-melt(lines,id.vars=c("X"))
    
    #create plot for either case
    example<-data.frame(close=AAPL$close,X=seq(1,nrow(AAPL)),Y=seq(1,nrow(AAPL))*as.double(tlines1[lineID,1])+as.double(tlines1[lineID,2]))
  
   if (lineID==0){
     g<-ggplot(data=example,aes(x=X))+geom_line(aes(y=close))+geom_line(aes(y=Y))+geom_line(data=melted,aes(x=X,y=value,group=variable))
   } else {
     g<-ggplot(data=example,aes(x=X))+geom_line(aes(y=close))+geom_line(aes(y=Y))#+geom_point(aes(y=Points),colour="red")
   }
  
  return(g)
}
```



```{r primary trendline creation function}
ticker<-'AAPL'

Trendline<-function(ticker="AMD"){
#begin function for ticker specified

AAPL<-data.frame(tq_get(ticker,get="stock.prices",from="2020-01-01"))
 
  # tlines.updated<-tlines[valid<(length(close)/30),]
  # tlines.updated<-tlines.updated[tlines.updated$relevant < .35,]
  # tlines.updated<-tlines.updated[!is.na(tlines.updated[,1]),]
   
   tlinesU<-createlines(AAPL,1)
   tlinesD<-createlines(AAPL,-1)
   tlines<-rbind(tlinesU,tlinesD)
   tlines<-tlines[!is.na(tlines[[1]])]
   #cluster tlines by a, b
   k<-kmeans(tlines[,1:2],centers=10)
   r<-sapply(1:10,function(x){which(k$cluster %in% x)})
   fl<-sapply(1:10,function(x){r
     o=tlines$score[r[[x]]]
     r[[x]][is.na(o)]<-0
     keep<-which(tlines$score[r[[x]]]==max(tlines$score[r[[x]]]))
     return(r[[x]][keep[1]])
   })
   
   
   return(list(AAPL,tlines))

} #end core function
```


```{r test}
V<-Trendline("AAPL")
Q<-plotline(V[[1]],V[[2]],2)

```


##########################
#test shiny application


```{r page}
ui<-fluidPage(
  
  sliderInput(inputId="num",
              label="Date Range",
              value=25,min=1,max=100),
  
  plotOutput("stockplot")
)

```

```{r server}
server<-function(input, output){
  
  V<-Trendline("AAPL")
  
  output$stockplot<-renderPlot({
    plot<-plotline(V[[1]],V[[2]],input$num)
    plot
    })

}

```

```{r app}
shinyApp(ui=ui,server=server)
```

